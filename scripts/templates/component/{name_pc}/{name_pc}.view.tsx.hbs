{{#if forwardRef}}
import type { ControllerProps } from './{{name_pc}}.controller'

import { forwardRef{{#if imperativeHandle}}, useImperativeHandle{{/if}}{{#if transitionPresence}}, useMemo{{/if}} } from 'react'
{{else}}
import type { FC } from 'react'
import type { ControllerProps } from './{{name_pc}}.controller'

{{#if imperativeHandle}}
import { useImperativeHandle{{#if transitionPresence}}, useMemo{{/if}} } from 'react'
{{else}}
{{#if transitionPresence}}
import { useMemo } from 'react'
{{/if}}
{{/if}}
{{/if}}
import classNames from 'classnames'
{{#if transitionPresence}}
import { gsap } from 'gsap'
{{/if}}

import css from './{{name_pc}}.module.scss'

{{#if forwardRef}}
import { multiRef } from '@/utils/multi-ref'

{{/if}}
import { useRefs } from '@/hooks/use-refs'
{{#if transitionPresence}}
import { useTransitionPresence } from '@/hooks/use-transition-presence'
{{/if}}

{{#if imperativeHandle}}
export type ViewHandle = {
  someMethod: () => void
}

{{/if}}
export interface ViewProps extends ControllerProps {}

export type ViewRefs = {
  root: HTMLDivElement
}

// View (pure and testable component, receives props exclusively from the controller)
{{#if forwardRef}}
export const View = forwardRef<HTMLDivElement, ViewProps>(({ className{{#if imperativeHandle}}, handleRef{{/if}} }, ref) => {
  const refs = useRefs<ViewRefs>()
{{else}}
export const View: FC<ViewProps> = ({ className{{#if imperativeHandle}}, handleRef{{/if}} }) => {
  const refs = useRefs<ViewRefs>()
{{/if}}

{{#if imperativeHandle}}
  useImperativeHandle(handleRef, () => ({
    someMethod: () => {
      //
    }
  }))

{{/if}}
{{#if transitionPresence}}
  useTransitionPresence(
    useMemo(
      () => ({
        animateIn: () => gsap.timeline().to(refs.root.current, { opacity: 1 }),
        animateOut: () => gsap.timeline().to(refs.root.current, { opacity: 0 })
      }),
      [refs]
    )
  )

{{/if}}
  return (
    <div className={classNames('{{name_pc}}', css.root, className)} {{#if forwardRef}}ref={multiRef(refs.root, ref)}{{else}}ref={refs.root}{{/if}}>
      <p>&lt;{{name_pc}} /&gt;</p>
    </div>
  )
}{{#if forwardRef}}){{/if}}

View.displayName = '{{name_pc}}_View'
