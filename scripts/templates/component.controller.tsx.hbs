{{#if forwardRef}}
{{#if imperativeHandle}}
import type { ForwardedRef } from 'react'
import type { ViewHandle } from './{{titleCase name}}.view'
{{/if}}

import { forwardRef, memo } from 'react'
{{else}}
{{#if imperativeHandle}}
import type { FC, ForwardedRef } from 'react'
import type { ViewHandle } from './{{titleCase name}}.view'
{{else}}
import type { FC } from 'react'
{{/if}}

import { memo } from 'react'
{{/if}}

import { View } from './{{titleCase name}}.view'

export interface ControllerProps {
  className?: string
{{#if imperativeHandle}}
  handleRef?: ForwardedRef<ViewHandle>
{{/if}}
}

// Controller (handles global state, router, data fetching, etc. Feeds props to the view component)
{{#if forwardRef}}
export const Controller = memo(forwardRef<HTMLDivElement, ControllerProps>((props, ref) => {
  return <View {...props} ref={ref} />
}))
{{else}}
export const Controller: FC<ControllerProps> = memo((props) => {
  return <View {...props} />
})
{{/if}}

Controller.displayName = '{{titleCase name}}_Controller'
