import { FC, memo, useEffect, useImperativeHandle, useRef } from 'react'
import classNames from 'classnames'
import { gsap } from 'gsap'

import css from './Page{{name_pc}}.module.scss'

import { Content, PageHandle, PageProps } from '@/data/types'

import copy from '@/utils/copy'

export interface Page{{name_pc}}Props extends PageProps {
  content: Content['page{{name_pc}}']
}
export interface ViewProps extends Page{{name_pc}}Props {}

// View (pure and testable component, receives props from the controller)
export const View: FC<ViewProps> = ({ content, onReady }) => {
  const rootRef = useRef<HTMLElement>(null)
  const handleRef = useRef<PageHandle>(null)

  useEffect(() => {
    gsap.set(rootRef.current, { opacity: 0 })
    onReady?.(handleRef)
  }, [onReady])

  useImperativeHandle(handleRef, () => ({
    animateIn: () => gsap.timeline().to(rootRef.current, { opacity: 1 }),
    animateOut: () => gsap.timeline().to(rootRef.current, { opacity: 0 })
  }))

  return (
    <main className={classNames('Page{{name_pc}}', css.root)} ref={rootRef}>
      <h1 className={css.title} {...copy.html(content.body.title)} />
    </main>
  )
}

View.displayName = 'Page{{name_pc}}-View'

// Controller (handles global state, router, data fetching, etc. Feeds props to the view component)
const Page{{name_pc}}: FC<Page{{name_pc}}Props> = (props) => {
  return <View {...props} />
}

Page{{name_pc}}.displayName = 'Page{{name_pc}}'

export default memo(Page{{name_pc}})
